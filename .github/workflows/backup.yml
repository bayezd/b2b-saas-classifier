name: Automated Backups

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  backup-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Supabase CLI
      run: |
        curl -s https://api.github.com/repos/supabase/cli/releases/latest | \
        grep "browser_download_url.*$(uname -s)_$(uname -m)" | \
        cut -d : -f 2,3 | \
        tr -d \" | \
        wget -qi -
        tar -xf supabase*.tar.gz
        sudo mv supabase /usr/local/bin/
    
    - name: Backup Supabase Database
      run: |
        supabase db dump --db-url ${{ secrets.SUPABASE_DB_URL }} --file-name backup-$(date +%Y%m%d)
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    
    - name: Upload Database Backup
      uses: actions/upload-artifact@v3
      with:
        name: database-backup
        path: backup-*.sql
        retention-days: 30

  backup-redis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Backup Redis
      run: |
        curl -X POST ${{ secrets.REDIS_BACKUP_URL }} \
        -H "Authorization: Bearer ${{ secrets.REDIS_BACKUP_TOKEN }}" \
        -H "Content-Type: application/json"
    
    - name: Verify Backup
      run: |
        sleep 30  # Wait for backup to complete
        curl ${{ secrets.REDIS_BACKUP_STATUS_URL }} \
        -H "Authorization: Bearer ${{ secrets.REDIS_BACKUP_TOKEN }}"

  notify-backup-status:
    needs: [backup-database, backup-redis]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check Backup Status
      run: |
        if [ "${{ needs.backup-database.result }}" == "success" ] && [ "${{ needs.backup-redis.result }}" == "success" ]; then
          echo "All backups completed successfully"
          exit 0
        else
          echo "Backup failed"
          exit 1
        fi
    
    - name: Send Notification
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Backup Failed',
            body: 'Daily backup job failed. Please check the logs.'
          });
